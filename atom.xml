<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Day Dream</title>
  
  <subtitle>just for fun</subtitle>
  <link href="www://example.com/atom.xml" rel="self"/>
  
  <link href="www://example.com/"/>
  <updated>2021-08-07T02:55:19.553Z</updated>
  <id>www://example.com/</id>
  
  <author>
    <name>OKAZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>25-回文链表</title>
    <link href="www://example.com/2021/08/07/25-回文链表/"/>
    <id>www://example.com/2021/08/07/25-回文链表/</id>
    <published>2021-08-07T02:55:19.000Z</published>
    <updated>2021-08-07T02:55:19.553Z</updated>
    
    <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a><a href="www.//https://okaz1999.github.io/"></a></h4><p><strong>方法一：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;www.//https://okaz1999.github.io/&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;方法一：&lt;/strong&gt;&lt;/p&gt;
&lt;fig</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="www://example.com/tags/LeetCode/"/>
    
    <category term="Easy" scheme="www://example.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>24-用栈实现队列</title>
    <link href="www://example.com/2021/08/07/24-用栈实现队列/"/>
    <id>www://example.com/2021/08/07/24-用栈实现队列/</id>
    <published>2021-08-07T02:54:02.000Z</published>
    <updated>2021-08-07T02:54:02.439Z</updated>
    
    <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a><a href="www.//https://okaz1999.github.io/"></a></h4><p><strong>方法一：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;www.//https://okaz1999.github.io/&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;方法一：&lt;/strong&gt;&lt;/p&gt;
&lt;fig</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="www://example.com/tags/LeetCode/"/>
    
    <category term="Easy" scheme="www://example.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>23-2的幂</title>
    <link href="www://example.com/2021/08/07/23-2的幂/"/>
    <id>www://example.com/2021/08/07/23-2的幂/</id>
    <published>2021-08-07T02:53:36.000Z</published>
    <updated>2021-08-07T02:53:36.859Z</updated>
    
    <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a><a href="www.//https://okaz1999.github.io/"></a></h4><p><strong>方法一：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;www.//https://okaz1999.github.io/&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;方法一：&lt;/strong&gt;&lt;/p&gt;
&lt;fig</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="www://example.com/tags/LeetCode/"/>
    
    <category term="Easy" scheme="www://example.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>22-用队列实现栈</title>
    <link href="www://example.com/2021/08/07/22-用队列实现栈/"/>
    <id>www://example.com/2021/08/07/22-用队列实现栈/</id>
    <published>2021-08-07T02:45:54.000Z</published>
    <updated>2021-08-07T02:45:54.844Z</updated>
    
    <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a><a href="www.//https://okaz1999.github.io/"></a></h4><p><strong>方法一：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;www.//https://okaz1999.github.io/&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;方法一：&lt;/strong&gt;&lt;/p&gt;
&lt;fig</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="www://example.com/tags/LeetCode/"/>
    
    <category term="Easy" scheme="www://example.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>21-存在重复元素II</title>
    <link href="www://example.com/2021/08/07/21-存在重复元素II/"/>
    <id>www://example.com/2021/08/07/21-存在重复元素II/</id>
    <published>2021-08-07T02:35:58.000Z</published>
    <updated>2021-08-07T02:35:58.563Z</updated>
    
    <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a><a href="www.//https://okaz1999.github.io/"></a></h4><p><strong>方法一：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;www.//https://okaz1999.github.io/&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;方法一：&lt;/strong&gt;&lt;/p&gt;
&lt;fig</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="www://example.com/tags/LeetCode/"/>
    
    <category term="Easy" scheme="www://example.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>20-同构字符串</title>
    <link href="www://example.com/2021/08/07/20-同构字符串/"/>
    <id>www://example.com/2021/08/07/20-同构字符串/</id>
    <published>2021-08-07T02:35:24.000Z</published>
    <updated>2021-08-07T02:35:24.188Z</updated>
    
    <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a><a href="www.//https://okaz1999.github.io/"></a></h4><p><strong>方法一：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;www.//https://okaz1999.github.io/&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;方法一：&lt;/strong&gt;&lt;/p&gt;
&lt;fig</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="www://example.com/tags/LeetCode/"/>
    
    <category term="Easy" scheme="www://example.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>19-计数质数</title>
    <link href="www://example.com/2021/08/07/19-计数质数/"/>
    <id>www://example.com/2021/08/07/19-计数质数/</id>
    <published>2021-08-07T02:33:27.000Z</published>
    <updated>2021-08-07T02:33:27.544Z</updated>
    
    <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a><a href="www.//https://okaz1999.github.io/"></a></h4><p><strong>方法一：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;www.//https://okaz1999.github.io/&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;方法一：&lt;/strong&gt;&lt;/p&gt;
&lt;fig</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="www://example.com/tags/LeetCode/"/>
    
    <category term="Easy" scheme="www://example.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>18-移除链表元素</title>
    <link href="www://example.com/2021/08/07/18-移除链表元素/"/>
    <id>www://example.com/2021/08/07/18-移除链表元素/</id>
    <published>2021-08-07T02:32:30.000Z</published>
    <updated>2021-08-07T02:32:30.364Z</updated>
    
    <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a><a href="www.//https://okaz1999.github.io/"></a></h4><p><strong>方法一：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;www.//https://okaz1999.github.io/&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;方法一：&lt;/strong&gt;&lt;/p&gt;
&lt;fig</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="www://example.com/tags/LeetCode/"/>
    
    <category term="Easy" scheme="www://example.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>17-快乐数</title>
    <link href="www://example.com/2021/08/07/17-快乐数/"/>
    <id>www://example.com/2021/08/07/17-快乐数/</id>
    <published>2021-08-07T02:29:12.000Z</published>
    <updated>2021-08-07T02:29:12.555Z</updated>
    
    <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a><a href="www.//https://okaz1999.github.io/"></a></h4><p><strong>方法一：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;www.//https://okaz1999.github.io/&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;方法一：&lt;/strong&gt;&lt;/p&gt;
&lt;fig</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="www://example.com/tags/LeetCode/"/>
    
    <category term="Easy" scheme="www://example.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>16-阶乘后的零</title>
    <link href="www://example.com/2021/08/07/16-阶乘后的零/"/>
    <id>www://example.com/2021/08/07/16-阶乘后的零/</id>
    <published>2021-08-07T02:22:52.000Z</published>
    <updated>2021-08-07T02:22:52.962Z</updated>
    
    <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a><a href="www.//https://okaz1999.github.io/"></a></h4><p><strong>方法一：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;www.//https://okaz1999.github.io/&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;方法一：&lt;/strong&gt;&lt;/p&gt;
&lt;fig</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="www://example.com/tags/LeetCode/"/>
    
    <category term="Easy" scheme="www://example.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>15-两数之和II</title>
    <link href="www://example.com/2021/08/06/15-两数之和II/"/>
    <id>www://example.com/2021/08/06/15-两数之和II/</id>
    <published>2021-08-06T03:28:13.000Z</published>
    <updated>2021-08-07T01:47:40.864Z</updated>
    
    <content type="html"><![CDATA[<h4 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/">两数之和</a></h4><p><strong>方法一：二分搜索</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; numbers, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numbers.<span class="built_in">size</span>()<span class="number">-1</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> low = i+<span class="number">1</span>, high = numbers.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (hight-low)/<span class="number">2</span> +low;</span><br><span class="line">            <span class="keyword">if</span>(number[mid] == target-number[i])</span><br><span class="line">                <span class="keyword">return</span> &#123;i+<span class="number">1</span>,mid+<span class="number">1</span>&#125;;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(numbers[mid]&gt;target-numbers[i])</span><br><span class="line">                high = mid <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                low = mid +<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二：双指针</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; numbers, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low=<span class="number">0</span>, high=numbser.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = numbers[low]+numbers[high];</span><br><span class="line">        <span class="keyword">if</span>(sum == target)&#123;</span><br><span class="line">            <span class="keyword">return</span>&#123;low+<span class="number">1</span>,high+<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;target)</span><br><span class="line">            ++low;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            --high;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;两数之和&quot;&gt;&lt;a href=&quot;#两数之和&quot; class=&quot;headerlink&quot; title=&quot;两数之和&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="www://example.com/tags/LeetCode/"/>
    
    <category term="Easy" scheme="www://example.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>14-相交链表</title>
    <link href="www://example.com/2021/08/06/14-相交链表/"/>
    <id>www://example.com/2021/08/06/14-相交链表/</id>
    <published>2021-08-06T03:23:02.000Z</published>
    <updated>2021-08-07T01:48:15.821Z</updated>
    
    <content type="html"><![CDATA[<h4 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">相交链表</a></h4><p><strong>方法一：哈希表</strong></p><p>略</p><p><strong>方法二：双指针</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">getIntersectionNode</span><span class="params">(ListNode* headA, ListNode* headB)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!headA || !headB)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode *pA = headA, *pB = headB;</span><br><span class="line">    <span class="keyword">while</span>(pA != pB)&#123;</span><br><span class="line">         pA = pA == <span class="literal">nullptr</span> ? headB : pA-&gt;next;</span><br><span class="line">         pB = pB == <span class="literal">nullptr</span> ? headA : pB-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;相交链表&quot;&gt;&lt;a href=&quot;#相交链表&quot; class=&quot;headerlink&quot; title=&quot;相交链表&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/intersection-of-two-linked-lists</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="www://example.com/tags/LeetCode/"/>
    
    <category term="Easy" scheme="www://example.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>13-最小栈</title>
    <link href="www://example.com/2021/08/06/13-最小栈/"/>
    <id>www://example.com/2021/08/06/13-最小栈/</id>
    <published>2021-08-06T03:22:25.000Z</published>
    <updated>2021-08-07T01:22:02.293Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最小栈"><a href="#最小栈" class="headerlink" title="最小栈"></a><a href="https://leetcode-cn.com/problems/min-stack/">最小栈</a></h4><p><strong>方法一：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> &#123;</span></span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; x_stack;</span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; min_stack;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MinStack</span>() &#123;</span><br><span class="line">        min_stack.<span class="built_in">push</span>(INT_MAX);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        x_stack.<span class="built_in">push</span>(x);</span><br><span class="line">        min_stack.<span class="built_in">push</span>(<span class="built_in">min</span>(min_stack.<span class="built_in">top</span>(), x));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        x_stack.<span class="built_in">pop</span>();</span><br><span class="line">        min_stack.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x_stack.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> min_stack.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;最小栈&quot;&gt;&lt;a href=&quot;#最小栈&quot; class=&quot;headerlink&quot; title=&quot;最小栈&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/min-stack/&quot;&gt;最小栈&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="www://example.com/tags/LeetCode/"/>
    
    <category term="Easy" scheme="www://example.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>12-环形链表</title>
    <link href="www://example.com/2021/08/05/12-环形链表/"/>
    <id>www://example.com/2021/08/05/12-环形链表/</id>
    <published>2021-08-05T02:42:44.000Z</published>
    <updated>2021-08-07T01:52:59.504Z</updated>
    
    <content type="html"><![CDATA[<h4 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle">环形链表</a></h4><p><strong>方法一：哈希表</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span></span>&#123;</span><br><span class="line">    unordered_set&lt;ListNode*&gt; seen;</span><br><span class="line">    <span class="keyword">while</span>(!head)&#123;</span><br><span class="line">        <span class="keyword">if</span>(seen.<span class="built_in">count</span>(head))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        seen.<span class="built_in">insert</span>(head);</span><br><span class="line">        head=head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二：快慢指针</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head||!head-&gt;next)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    ListNode* slow = head;</span><br><span class="line">    ListNode* fast = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(slow!=fast)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!fast||!fast-&gt;next)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        slow=slow-&gt;next;</span><br><span class="line">        fast=fast-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法三：</strong></p><p><img src="../images/image-20210806110728165.png" alt="image-20210806110728165"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;环形链表&quot;&gt;&lt;a href=&quot;#环形链表&quot; class=&quot;headerlink&quot; title=&quot;环形链表&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/linked-list-cycle&quot;&gt;环形链表&lt;/a&gt;&lt;/h4&gt;</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="www://example.com/tags/LeetCode/"/>
    
    <category term="Easy" scheme="www://example.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>11-买股票最好时机</title>
    <link href="www://example.com/2021/08/05/11-买股票最好时机/"/>
    <id>www://example.com/2021/08/05/11-买股票最好时机/</id>
    <published>2021-08-05T02:42:27.000Z</published>
    <updated>2021-08-07T01:52:24.595Z</updated>
    
    <content type="html"><![CDATA[<h4 id="买股票最佳时机"><a href="#买股票最佳时机" class="headerlink" title="买股票最佳时机"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">买股票最佳时机</a></h4><p><strong>方法一：贪心</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minPrice = INT_MIN; </span><br><span class="line">    <span class="keyword">int</span> maxProfit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> price : prices)&#123;</span><br><span class="line">        minPrice=<span class="built_in">min</span>(minPrice,price);</span><br><span class="line">        maxProfit=<span class="built_in">max</span>(maxProfit,price-minPrice);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxPrice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;买股票最佳时机&quot;&gt;&lt;a href=&quot;#买股票最佳时机&quot; class=&quot;headerlink&quot; title=&quot;买股票最佳时机&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/best-time-to-buy-and-se</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="www://example.com/tags/LeetCode/"/>
    
    <category term="Easy" scheme="www://example.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>10-杨辉三角II</title>
    <link href="www://example.com/2021/08/05/10-杨辉三角II/"/>
    <id>www://example.com/2021/08/05/10-杨辉三角II/</id>
    <published>2021-08-05T02:42:14.000Z</published>
    <updated>2021-08-07T01:52:05.914Z</updated>
    
    <content type="html"><![CDATA[<h4 id="杨辉三角II"><a href="#杨辉三角II" class="headerlink" title="杨辉三角II"></a><a href="https://leetcode-cn.com/problems/pascals-triangle-ii/">杨辉三角II</a></h4><p><strong>方法一：滚动数组</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; pre, cur;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= rowIndex; ++i) &#123;</span><br><span class="line">            cur.<span class="built_in">resize</span>(i + <span class="number">1</span>);</span><br><span class="line">            cur[<span class="number">0</span>] = cur[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                cur[j] = pre[j - <span class="number">1</span>] + pre[j];</span><br><span class="line">            &#125;</span><br><span class="line">            pre = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>单数组优化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span></span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">row</span><span class="params">(rowIndex+<span class="number">1</span>)</span></span>;</span><br><span class="line">    row[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;rowIndex;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&gt;<span class="number">0</span>;--j)</span><br><span class="line">            row[j]+=row[j<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：线性递推<br>$$<br>C^m_n=\frac{n!}{m!(n-m)!}\<br>杨辉三角每一行即为&lt;C_n^0,…,C_n^n&gt;\<br>通过公式C^m_n=C^{m-1}_n\cdot\frac{n-m+1}{m}可以得到序列的值<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span></span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">row</span><span class="params">(rowIndex + <span class="number">1</span>)</span></span>;</span><br><span class="line">    row[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;rowIndex;++i)&#123;</span><br><span class="line">        row[i] = <span class="number">1LL</span>*row[i<span class="number">-1</span>]*(rowIndex-i+<span class="number">1</span>)/i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> row;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;杨辉三角II&quot;&gt;&lt;a href=&quot;#杨辉三角II&quot; class=&quot;headerlink&quot; title=&quot;杨辉三角II&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/pascals-triangle-ii/&quot;&gt;杨辉三角</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="www://example.com/tags/LeetCode/"/>
    
    <category term="Easy" scheme="www://example.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>9-杨辉三角</title>
    <link href="www://example.com/2021/08/05/9-杨辉三角/"/>
    <id>www://example.com/2021/08/05/9-杨辉三角/</id>
    <published>2021-08-05T02:42:04.000Z</published>
    <updated>2021-08-07T01:51:29.832Z</updated>
    
    <content type="html"><![CDATA[<h4 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a><a href="https://leetcode-cn.com/problems/pascals-triangle/">杨辉三角</a></h4><p><strong>方法一：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;<span class="built_in">generate</span>(<span class="keyword">int</span> numRows)&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">ret</span>(numRows);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numRows;++i)&#123;</span><br><span class="line">        ret[i].<span class="built_in">resize</span>(i+<span class="number">1</span>);</span><br><span class="line">        ret[i][<span class="number">0</span>]=ret[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;++j)&#123;</span><br><span class="line">            ret[i][j] = ret[i<span class="number">-1</span>][j]+ret[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;杨辉三角&quot;&gt;&lt;a href=&quot;#杨辉三角&quot; class=&quot;headerlink&quot; title=&quot;杨辉三角&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/pascals-triangle/&quot;&gt;杨辉三角&lt;/a&gt;&lt;/h4&gt;</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="www://example.com/tags/LeetCode/"/>
    
    <category term="Easy" scheme="www://example.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>8-总路径总和</title>
    <link href="www://example.com/2021/08/05/8-总路径总和/"/>
    <id>www://example.com/2021/08/05/8-总路径总和/</id>
    <published>2021-08-05T02:41:49.000Z</published>
    <updated>2021-08-07T01:50:55.454Z</updated>
    
    <content type="html"><![CDATA[<h4 id="总路径总和"><a href="#总路径总和" class="headerlink" title="总路径总和"></a><a href="https://leetcode-cn.com/problems/path-sum/">总路径总和</a></h4><p><strong>方法一：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasPathSum</span><span class="params">(TreeNode *root, <span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    queue&lt;TreeNode*&gt; queue_node;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; que_val;</span><br><span class="line">    que_node.<span class="built_in">push</span>(root);</span><br><span class="line">    que_val.<span class="built_in">pop</span>(root-&gt;val);</span><br><span class="line">    <span class="keyword">while</span>(!que_node.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        TreeNode *now = que_node.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">int</span> temp = que_val.<span class="built_in">front</span>();</span><br><span class="line">        que_node.<span class="built_in">pop</span>();</span><br><span class="line">        que_val.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(!now-&gt;left &amp;&amp; !now-&gt;right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp == sum)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!now-&gt;left)&#123;</span><br><span class="line">            que_node.<span class="built_in">push</span>(now-&gt;left);</span><br><span class="line">            que_val.<span class="built_in">push</span>(now-&gt;left-&gt;val + temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!now-&gt;right)&#123;</span><br><span class="line">            que_node.<span class="built_in">push</span>(now-&gt;right);</span><br><span class="line">            que_val.<span class="built_in">push</span>(now-&gt;right-&gt;val + temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasPathSum</span><span class="params">(TreeNode *root, <span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(!root-&gt;left &amp;&amp; !root-&gt;right)</span><br><span class="line">        <span class="keyword">return</span> sum == root-&gt;val;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hasPathSum</span>(root-&gt;left,sum-root-&gt;val) ||</span><br><span class="line">        <span class="built_in">hasPathSum</span>(root-&gt;right,sum-root-&gt;val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;总路径总和&quot;&gt;&lt;a href=&quot;#总路径总和&quot; class=&quot;headerlink&quot; title=&quot;总路径总和&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/path-sum/&quot;&gt;总路径总和&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="www://example.com/tags/LeetCode/"/>
    
    <category term="Easy" scheme="www://example.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>7-二叉树最小深度</title>
    <link href="www://example.com/2021/08/05/7-二叉树最小深度/"/>
    <id>www://example.com/2021/08/05/7-二叉树最小深度/</id>
    <published>2021-08-05T02:41:29.000Z</published>
    <updated>2021-08-05T03:12:00.419Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二叉树最小深度"><a href="#二叉树最小深度" class="headerlink" title="二叉树最小深度"></a><a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/">二叉树最小深度</a></h4><p><strong>方法一：深度优先搜索</strong></p><p>时间复杂度O(n)，空间复杂度O(h)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode *root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(!root-&gt;left &amp;&amp; !root-&gt;right)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> min_depth = INT_MAX;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;left)</span><br><span class="line">        min_depth = <span class="built_in">min</span>(<span class="built_in">minDepth</span>(root-&gt;left, min_depth));</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;right)</span><br><span class="line">        min_depth = <span class="built_in">min</span>(<span class="built_in">minDepth</span>(root-&gt;right, min_depth));</span><br><span class="line">    <span class="keyword">return</span> min_depth + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：广度优先搜索</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode * root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    queue&lt;pair&lt;TreeNode*, <span class="keyword">int</span>&gt; &gt; que;</span><br><span class="line">    que.<span class="built_in">emplace</span>(root, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        TreeNode* node = que.<span class="built_in">front</span>().first;</span><br><span class="line">        <span class="keyword">int</span> depth = que.<span class="built_in">front</span>().sectond;</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;left == <span class="literal">nullptr</span> &amp;&amp; node-&gt;right == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> depth;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;left != <span class="literal">nullptr</span>)</span><br><span class="line">            que.<span class="built_in">emplace</span>(node-&gt;left,depth+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;right!= <span class="literal">nullptr</span>)</span><br><span class="line">            que.<span class="built_in">emplace</span>(node-&gt;right,depth+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;二叉树最小深度&quot;&gt;&lt;a href=&quot;#二叉树最小深度&quot; class=&quot;headerlink&quot; title=&quot;二叉树最小深度&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/minimum-depth-of-binary</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="www://example.com/tags/LeetCode/"/>
    
    <category term="Easy" scheme="www://example.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>6-平衡二叉树</title>
    <link href="www://example.com/2021/08/05/6-平衡二叉树/"/>
    <id>www://example.com/2021/08/05/6-平衡二叉树/</id>
    <published>2021-08-05T02:20:59.000Z</published>
    <updated>2021-08-05T02:49:19.796Z</updated>
    
    <content type="html"><![CDATA[<h4 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a><a href="https://leetcode-cn.com/problems/balanced-binary-tree/">平衡二叉树</a></h4><p><strong>方法一：自顶向下递归</strong></p><p>时间复杂度O($n^2$)，空间复杂度O(n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(TreeNode *root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">height</span>(root-&gt;left),<span class="built_in">height</span>(root-&gt;right));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(<span class="built_in">height</span>(root-&gt;left)-<span class="built_in">height</span>(root-&gt;right))&lt;=<span class="number">1</span> &amp;&amp; <span class="built_in">isBalanced</span>(root-&gt;left) &amp;&amp; <span class="built_in">isBalanced</span>(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二：自底向上递归</strong></p><p>时间复杂度O(n)，空间复杂度O(n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(TreeNode *root)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> leftHeight = <span class="built_in">height</span>(root-&gt;left);</span><br><span class="line">    <span class="keyword">int</span> rightHeight = <span class="built_in">height</span>(root-&gt;right);</span><br><span class="line">    <span class="keyword">if</span>(leftHeight == <span class="number">-1</span>||rightHeight == <span class="number">-1</span> || <span class="built_in">abs</span>(leftHeight - rightHeight)&gt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(leftHeight,rightHeight)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode * root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">height</span>(root) &gt;=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;平衡二叉树&quot;&gt;&lt;a href=&quot;#平衡二叉树&quot; class=&quot;headerlink&quot; title=&quot;平衡二叉树&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/balanced-binary-tree/&quot;&gt;平衡二叉树&lt;</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="www://example.com/tags/LeetCode/"/>
    
    <category term="Easy" scheme="www://example.com/tags/Easy/"/>
    
  </entry>
  
</feed>
